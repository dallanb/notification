version: '3.2'

services:
    app:
        container_name: app
        image: dallanbhatti/notification:test
        restart: on-failure
        volumes:
            - mongo_bin:/home/app/bin/mongo
        env_file:
            - env/test/.env.app
        healthcheck:
            test: curl --fail -s app:3000/ping || exit 1
            interval: 10s
            timeout: 5s
            retries: 5
        ports:
            - 3000:3000
        depends_on:
            - cache
            - db
            - kafka
            - mongodb
            - zookeeper
        networks:
            - test-net
    cache:
        container_name: cache
        image: redis:6
        restart: unless-stopped
        volumes:
            - cache_data:/var/libs/redis
        env_file:
            - env/test/.env.cache
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 30s
            timeout: 10s
            retries: 5
        networks:
            - test-net
    db:
        container_name: db
        image: postgres:9.6
        volumes:
            - db_data:/var/lib/postgresql/data/
        env_file:
            - env/test/.env.db
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U app']
            interval: 10s
            timeout: 5s
            retries: 20
        networks:
            - test-net
    kafka:
        container_name: kafka
        image: wurstmeister/kafka:latest
        restart: on-failure
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        env_file:
            - env/test/.env.kafka
        depends_on:
            - zookeeper
        networks:
            - test-net
    mongodb:
        container_name: mongodb
        image: mongo:3.6
        volumes:
            - mongo_data:/data/db
            - mongo_home:/home/mongodb # this must be manually created and chown'd to 999 https://github.com/docker-library/mongo/issues/323
            - mongo_bin:/docker-entrypoint-initdb.d
        env_file:
            - env/test/.env.mongodb
        networks:
            - test-net
    rabbitmq:
        container_name: rabbitmq
        image: rabbitmq:3-management-alpine
        restart: on-failure
        volumes:
            - rabbitmq_data/:/var/lib/rabbitmq/
        env_file:
            - env/test/.env.rabbitmq
        networks:
            - test-net
    zookeeper:
        container_name: zookeeper
        image: wurstmeister/zookeeper:latest
        restart: on-failure
        env_file:
            - env/test/.env.zookeeper
        networks:
            - test-net
volumes:
    cache_data:
    db_data:
    mongo_bin:
    mongo_data:
    mongo_home:
    rabbitmq_data:
networks:
    test-net:
        driver: bridge
